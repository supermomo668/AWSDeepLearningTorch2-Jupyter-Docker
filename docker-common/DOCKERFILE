ARG AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
# From hub: supermomo668/dev:aws-pytorch-training_2.0.1-cpu-py310-ubuntu20.04-ec2
# From AWS: ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:2.0.1-gpu-py310-cu118-ubuntu20.04-ec2
FROM supermomo668/dev:aws-pytorch-training_2.0.1-cpu-py310-ubuntu20.04-ec2 AS base
 
# install deps 
RUN apt update && \
	apt install nodejs \
	ffmpeg libsm6 libxext6 graphviz protobuf-compiler  \
	mysql-client curl tmux wget docker.io rsync zip unzip -y 
# Install Ngrok
RUN wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz && \
	curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
	echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | tee /etc/apt/sources.list.d/ngrok.list && \
	apt update --allow-insecure-repositories && apt install ngrok && \
	rm ngrok-v3-stable-linux-amd64.tgz
	
RUN apt install npm -y && npm install -g npm@latest && apt upgrade -y && apt autoremove -y

ENV INSTALL_SCRIPTS /tmp/scripts
COPY cloud-tools-setup/* ${INSTALL_SCRIPTS}
RUN echo "Run scripts installation ..." chmod +x ${INSTALL_SCRIPTS}/*.sh && \
	${INSTALL_SCRIPTS}/gcp_install.sh && ${INSTALL_SCRIPTS}/storj_install.sh &&
	
FROM base as builder

# Create conda virtual env
COPY docker-common/environment.yml docker-common/requirements.txt ./
RUN conda env create -f environment.yml
SHELL ["conda", "run", "-n", "dl", "/bin/bash", "-c"]
# install python deps and update all in 'default' environment
RUN pip install -r requirements.txt

# Required to run jupyter process successfully in background
ENV TINI_VERSION v0.6.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini
ENTRYPOINT ["/usr/bin/tini", "--"]
# Update all python deps
SHELL ["conda", "run", "-n", "dl", "/bin/bash", "-c"]
RUN pip --disable-pip-version-check list --outdated --format=json | python -c "import json, sys; print('\n'.join([x['name'] for x in json.load(sys.stdin)]))" | xargs -n1 pip install -U

FROM builder as runner

WORKDIR /root/projects
SHELL ["/bin/bash", "-c"]
RUN echo '{"storage-driver": "overlay2"}' > /etc/docker/daemon.json && conda init && echo "conda activate dl" >> ~/.bashrc && . ~/.bashrc
CMD ["jupyter", "lab", "--port" , "8888", "--no-browser" ,"--ip", "0.0.0.0", "--allow-root"]
